@page "/create"
@using SurveyAppPWr.Services
@using SurveyAppPWr.Data.Survey
@using SurveyAppPWr.Data.Test

<h3>Create your survey/test</h3>

<div class="button-container">
    @switch(_pageCount)
    {
        case 0:
            <Button Color="ButtonColor.Primary" Class="me-3" @onclick="NextCallback">Next</Button>
            break;
        case 1:
            <Button Color="ButtonColor.Primary" Class="me-1" @onclick="BackCallback">Back</Button>
            <Button Color="ButtonColor.Primary" Class="me-3" @onclick="FinishCallback">Finish</Button>
            break;
    }
</div>

@if (_pageCount == 0)
{
    <div>
        <Button Color="ButtonColor.Primary" @onclick="() => _type = true">Survey</Button>
        <Button Color="ButtonColor.Primary" @onclick="() => _type = false">Test</Button>
    </div>
        
    <div>
         Set title:
        <p>
            <InputText ValueExpression="() => _fileTitle" ValueChanged="(value) => _fileTitle = value"></InputText>
        </p>

        @if (_type)
        {
            <div>
                Who is the author?
                <p>
                    <InputText ValueExpression="() => _author" ValueChanged="(value) => _author = value"></InputText>
                </p>
                
                Do you want your survey to be public?
                <div>
                    <Button Color="ButtonColor.Primary" @onclick="() => _isPublic = true">Yes</Button>
                    <Button Color="ButtonColor.Primary" @onclick="() => _isPublic = false">No</Button>
                </div>
                
            </div>
        }
    </div>
}

@if (_pageCount == 1)
{
    <div class="scrollable-container">
        
        @switch (_type)
        {
            case false:
                <h4>
                    Add your questions:
                    <Button Color="ButtonColor.Primary" @onclick="OnShowQuestionModalClick">+</Button>
                </h4> 
                if (_tests?.TestQuestions != null)
                {
                    var questionNr = 1;
                    foreach (var question in _tests.TestQuestions)
                    {
                        <div class="question" >@questionNr. @question.QuestionText
                            <Button Color="ButtonColor.Primary" @onclick="() => OnShowAnswerModalClick(question)">Add answer</Button>
                        </div>

                        <div class="answers">
                            @if (question?.Answers != null)
                            {
                                var answerNr = 1;
                                foreach (var answer in question.Answers)
                                {
                                    <div>(@answerNr) @answer.AnswerText  (@answer.IsCorrectAnswer.ToString())</div>
                            
                                    answerNr++;
                                }
                            }
                        </div>
                
                        questionNr++;
                    }
                }
                break;
            case true:
                <h4>
                    Add your questions:
                    <Button Color="ButtonColor.Primary" @onclick="OnShowSQuestionModalClick">+</Button>
                </h4> 
                if (_survey?.SQuestions != null)
                {
                    var questionNr = 1;
                    foreach (var question in _survey.SQuestions)
                    {
                        <div class="question" >@questionNr. @question.SQuestionText Is question open: @question.SQuestionType
                            @if (question.SQuestionType == false)
                            {
                                <Button Color="ButtonColor.Primary" @onclick="() => OnShowSAnswerModalClick(question)">Add answer</Button>
                            }
                        </div>

                        <div class="answers">
                            @if (question?.SAnswers != null)
                            {
                                var answerNr = 1;
                                foreach (var answer in question.SAnswers)
                                {
                                    <div>(@answerNr) @answer.SAnswerText</div>
                            
                                    answerNr++;
                                }
                            }
                        </div>
                
                        questionNr++;
                    }
                }
            break;
        }
    </div>
}



<Modal @ref="_testQuestionModal" Title="What's your question?">
    <BodyTemplate>
        
        <InputText ValueExpression="() => _questionText" ValueChanged="(value) => _questionText = value"></InputText>
    
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="OnHideQuestionModalClick">Add question</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="_testAnswerModal" Title="Set answer">
    <BodyTemplate>
        <InputText ValueExpression="() => _answerText" ValueChanged="(value) => _answerText = value"></InputText>

        <div>Is this answer true or false?</div>
        
        <div>
            <Button Color="ButtonColor.Success" @onclick="() => _isAnswerTrue = true">True</Button>
            <Button Color="ButtonColor.Danger" @onclick="() => _isAnswerTrue = false">False</Button>
        </div>
        
        <div>
            Current value: 
            @_isAnswerTrue.ToString()
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="OnHideAnswerModalClick">Add answer</Button>
    </FooterTemplate>
</Modal>



<Modal @ref="_surveyQuestionModal" Title="What's your question?">
    <BodyTemplate>
        <InputText ValueExpression="() => _questionText" ValueChanged="(value) => _questionText = value"></InputText>

        <p>
            <div>Set question type:</div>
            <Button Color="ButtonColor.Primary" @onclick="() => _questionType = true">Open-text question</Button>
            <Button Color="ButtonColor.Primary" @onclick="() => _questionType = false">Closed-ended question</Button>
        </p>
        
    
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="OnHideSQuestionModalClick">Add question</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="_surveyAnswerModal" Title="Set answer">
    <BodyTemplate>
        <InputText ValueExpression="() => _answerText" ValueChanged="(value) => _answerText = value"></InputText>

    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="OnHideSAnswerModalClick">Add answer</Button>
    </FooterTemplate>
</Modal>


@inject AuthenticationStateProvider AuthProvider
@inject ApplicationDbService DbService
@inject NavigationManager Navi

@code {
    private int _pageCount;
    private TestownikQuestion? _currentQuestion;
    private Question? _currentSQuestion;
    private int _currentQuestionIndex = -1;
    private int _currentSQuestionIndex = -1;
    private bool _type = true;
    
    private TestownikTest _tests = null!;
    private Survey _survey = null!;
    private string _fileTitle = string.Empty;
    
    private Modal _testAnswerModal = null!;
    private Modal _surveyAnswerModal = null!;
    private string _answerText = string.Empty;
    private bool _isAnswerTrue;
    
    private Modal _testQuestionModal = null!;
    private Modal _surveyQuestionModal = null!;
    private string _questionText = string.Empty;

    private string _author = string.Empty;
    private DateOnly _creationDate = DateOnly.FromDateTime(DateTime.Now);
    private bool _isPublic;
    private bool _questionType;


    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthProvider.GetAuthenticationStateAsync()).User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        
        _tests = new TestownikTest
        {
            UserId = userStringId,
            TestTitle = string.Empty,
            TestQuestions = []
        };

        _survey = new Survey
        {
            SurveyTitle = string.Empty,
            CreationDate = _creationDate,
            Author = string.Empty,
            UserId = userStringId,
            SQuestions = []
        };
        
        _pageCount = 0;
    }

    private void NextCallback()
    {
        if (_fileTitle != string.Empty)
        {
            _tests.TestTitle = _fileTitle;
            _survey.Author = _author;
            
            _pageCount++;
        }
    }

    private void BackCallback()
    {
        _pageCount--;
    }

    private async Task FinishCallback()
    {
        switch (_type)
        {
            case true:
                _survey.SurveyTitle = _fileTitle;
                _survey.IsPublic = _isPublic;
                await DbService.DbInsertSurveyAsync(_survey);
                break;
            case false:
                await DbService.DbInsertTestAsync(_tests);
                break;
        }

        Navi.NavigateTo("/MySurveys");
    }
    
    private async Task OnShowQuestionModalClick()
    {
        _questionText = string.Empty;    
        
        await _testQuestionModal.ShowAsync();
    }
    
    private async Task OnShowSQuestionModalClick()
    {
        _questionText = string.Empty;
        _author = string.Empty;
        
        await _surveyQuestionModal.ShowAsync();
    }
    
    private async Task OnHideQuestionModalClick()
    {
        if (_questionText != string.Empty)
        {
            var question = new TestownikQuestion
            {
                QuestionText = _questionText,
                Answers = []
            };

            _tests.TestQuestions.Add(question);
            await _testQuestionModal.HideAsync();
        }
    }
    
    private async Task OnHideSQuestionModalClick()
    {
        if (_questionText != string.Empty)
        {
            switch (_questionType)
            {
                case true:
                {
                    var questionOpen = new Question
                    {
                        SQuestionType = _questionType,
                        SQuestionText = _questionText,
                    };
                    _survey.SQuestions.Add(questionOpen);
                    break;
                }
                case false:
                {
                    var questionClosed = new Question
                    {
                        SQuestionType = _questionType,
                        SQuestionText = _questionText,
                        SAnswers = [],
                    };
                    _survey.SQuestions.Add(questionClosed);
                    break;
                }
            }

            await _surveyQuestionModal.HideAsync();
        }
    }
    
    
    private async Task OnShowAnswerModalClick(TestownikQuestion question)
    {
        _answerText = string.Empty;
        
        _currentQuestion = question;
        _currentQuestionIndex = _tests.TestQuestions.IndexOf(question);
        await _testAnswerModal.ShowAsync();
    }
    
    private async Task OnShowSAnswerModalClick(Question question)
    {
        _answerText = string.Empty;
        
        _currentSQuestion = question;
        _currentSQuestionIndex = _survey.SQuestions.IndexOf(question);
        await _surveyAnswerModal.ShowAsync();
    }
    
    
    private async Task OnHideAnswerModalClick()
    {
        if (_currentQuestion != null && _currentQuestionIndex >= 0 && _answerText != string.Empty)
        {
            var tempAns = new TestownikAnswer
            {
                AnswerText = _answerText,
                IsCorrectAnswer = _isAnswerTrue
            };

            _tests.TestQuestions[_currentQuestionIndex].Answers.Add(tempAns);

            await _testAnswerModal.HideAsync();
            
        }
    }
    
    private async Task OnHideSAnswerModalClick()
    {
        if (_currentSQuestion != null && _currentSQuestionIndex >= 0 && _answerText != string.Empty)
        {
            var tempAns = new Data.Survey.Answer
            {
                SAnswerText = _answerText
            };

            _survey.SQuestions[_currentSQuestionIndex].SAnswers?.Add(tempAns);

            await _surveyAnswerModal.HideAsync();
        }
    }
}