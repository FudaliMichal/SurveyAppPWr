@page "/MySurveys"
@using System.IO.Compression
@using System.IO
@using SurveyAppPWr.Models
@using SurveyAppPWr.Services

<h3>My Surveys</h3>

<Modal @ref="_modal" Title="Upload your file">
    <BodyTemplate>

        Set your survey's name:
        <p>
            <InputText ValueExpression="() => _testName" ValueChanged="(value) => _testName = value"></InputText>
        </p>
        
        <p>
            <InputFile OnChange="HandleSelectedFiles" accept=".zip"/>
        </p>

        @if (_uploadResult != null)
        {
            <p>@_uploadResult</p>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="OnHideUploadModalClick">Done</Button>
    </FooterTemplate>
</Modal>
<Button Color="ButtonColor.Success" @onclick="OnShowUploadModalClick">Upload files</Button>


<div class="scrollable-container">
    <div class="grid">
        @if (_testList != null)
        {
            foreach (var test in _testList)
            {
                <div class="grid-item">
                    @test.TestTitle
                    <div class="button-container">
                        <Button Color="ButtonColor.Primary">Open</Button>
                        <Button Color="ButtonColor.Primary" @onclick="() => DownloadCallback(test)">Download</Button>
                        <Button Color="ButtonColor.Danger" @onclick="() => DeleteTestCallback(test)">Delete</Button>
                    </div>
                </div>
            }
        }
    </div>
</div>

<ConfirmDialog @ref="_dialog" />


@inject TestFileParserService ParserService
@inject AuthenticationStateProvider AuthProvider
@inject ApplicationDbService DbService

@code {
    private string _uploadResult = string.Empty;
    private string _curUserId = string.Empty;
    private string _testName = string.Empty;
    private Modal _modal = default!;
    private List<TestownikTestModel>? _testList;
    private ConfirmDialog _dialog = null!;

    private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        if (_testName != string.Empty)
        {
            var file = e.File;

            if (file.Name.EndsWith(".zip", StringComparison.OrdinalIgnoreCase))
            {
                await ProcessZipFileAsync(file);
            }
            else
            {
                _uploadResult = "Please upload a .zip file.";
            } 
        }
        else
        {
            _uploadResult = "Make sure you set a correct name for your survey!";
        }
    }

    private async Task ProcessZipFileAsync(IBrowserFile file)
    {

        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        var tempDir = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
        Directory.CreateDirectory(tempDir);

        try
        {
            var tempZipPath = Path.Combine(tempDir, file.Name);
            await File.WriteAllBytesAsync(tempZipPath, buffer);

            ZipFile.ExtractToDirectory(tempZipPath, tempDir);
            Console.WriteLine(tempDir);
            
            var testownikTest = await ParserService.ParseFileAsync(tempDir, _curUserId, _testName);
            await DbService.DbInsertTestAsync(testownikTest);
                        
            _uploadResult = $"Uploaded '{file.Name}' successfully and processed {testownikTest.TestQuestions.Count} question(s).";
            
        }
        catch (Exception ex)
        {
            _uploadResult = $"Error processing zip file: {ex.Message}";
        }
        finally
        {
            if (Directory.Exists(tempDir))
            {
                Directory.Delete(tempDir, true);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthProvider.GetAuthenticationStateAsync()).User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        _curUserId = userStringId;

        _testList =  await DbService.TestContentsAsync(_curUserId);

        // foreach (var test in _testList)
        // {
        //     Console.WriteLine(test.TestTitle);
        // }
    }
    

    private async Task OnShowUploadModalClick()
    {
        _testName = string.Empty;
        _uploadResult = string.Empty;

        await _modal.ShowAsync();
    }

    private async Task OnHideUploadModalClick()
    {
        await _modal.HideAsync();
        _testList =  await DbService.TestContentsAsync(_curUserId);
    }

    private async Task DeleteTestCallback(TestownikTestModel test)
    {
        var temp = await ShowConfirmationAsync();

        if (temp)
        {
            await DbService.DeleteTestAsync(test);
            _testList =  await DbService.TestContentsAsync(_curUserId);

        }
    }

    private async Task<bool> ShowConfirmationAsync()
    {
        var confirmation = await _dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the selected file. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        return confirmation;
    }

    private async Task DownloadCallback(TestownikTestModel test)
    {
        var questions = test.TestQuestions;
    
        using var memoryStream = new MemoryStream();
    
        using (var archive = new ZipArchive(memoryStream, ZipArchiveMode.Create, true))
        {
            int questionNumber = 1;
        
            foreach (var question in questions)
            {
                var questionText = $"{questionNumber}: {question.QuestionText}\n";

                if (question.Answers != null)
                {
                    int answerNumber = 1;
                    foreach (var answer in question.Answers)
                    {
                        questionText += $"\t{answerNumber}: {answer.AnswerText}\n";
                        answerNumber++;
                    }
                }
            
                var zipEntry = archive.CreateEntry($"{questionNumber}.txt");
                using var entryStream = zipEntry.Open();
                using var streamWriter = new StreamWriter(entryStream);
            
                await streamWriter.WriteAsync(questionText);
            
                questionNumber++;
            }
        }
    
        var zipFileName = $"{test.TestTitle}.zip";
    
        var zipBytes = memoryStream.ToArray();
        //dodaj controler
    }

    
}