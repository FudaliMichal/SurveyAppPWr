@page "/MySurveys"
@using System.IO.Compression
@using System.IO
@using SurveyAppPWr.Models.Survey
@using SurveyAppPWr.Models.Test
@using SurveyAppPWr.Services
@using Blazorise.Charts
@using SurveyAppPWr.Components

<h3>Your surveys:</h3>

<Modal @ref="_modal" Title="Upload your file">
    <BodyTemplate>
        <p>
            <InputFile OnChange="HandleSelectedFiles" accept=".zip"/>
        </p>

        @if (_uploadResult != null)
        {
            <p>@_uploadResult</p>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="OnHideUploadModalClick">Done</Button>
    </FooterTemplate>
</Modal>
<Button Color="ButtonColor.Success" @onclick="OnShowUploadModalClick">Upload files</Button>

<ConfirmDialog @ref="_dialog" />

<div class="scrollable-container">
    <div class="grid">
        @if (_surveyList != null)
        {
            foreach (var survey in _surveyList)
            {
                <div class="grid-item">
                    <h4>@survey.SurveyTitle</h4>
                    
                    <div class="bottom-info">
                        <span>Question count:@survey.SurveyQuestions.Count</span>
                        <span>@survey.CreationDate.ToShortDateString(), @(survey.IsPublic ? "Public" : "Private")</span>
                        <span><strong>Author:</strong> @survey.Author</span>
                    </div>

                    <div class="button-container">
                        <Dropdown Color="DropdownColor.Primary">
                            <DropdownToggleButton></DropdownToggleButton>
                            <DropdownMenu>
                                <DropdownItem To="#" @onclick="() => OnShowSModalClick(survey)">Open Statistics</DropdownItem>
                                <DropdownItem To="#" Type="DropdownItemType.Link" href="@($"/api/download/survey/{survey.SurveyId}")">Download</DropdownItem>
                                <DropdownItem To="#" @onclick="() => DeleteSurveyCallback(survey)">Delete</DropdownItem>
                                <DropdownItem To="#" @onclick="() => SwitchPublicStateCallback(survey)">Make public/private</DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </div>
                </div>
            }
        }

        @if (_testList != null)
        {
            foreach (var test in _testList)
            {
                <div class="grid-item-test">
                    <h4>@test.TestTitle</h4>

                    <div class="question-info">
                        <p><strong>Question count:</strong> @test.TestQuestions.Count</p>
                    </div>
                    
                    <div class="bottom-info">
                        <span>Test</span>
                    </div>

                    <div class="button-container">
                        <Dropdown Color="DropdownColor.Primary">
                            <DropdownToggleButton></DropdownToggleButton>
                            <DropdownMenu>
                                <DropdownItem To="#" Type="DropdownItemType.Link" href="@($"/api/download/test/{test.TestId}")">Download</DropdownItem>
                                <DropdownItem To="#" @onclick="() => DeleteTestCallback(test)">Delete</DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </div>
                </div>
            }
        }
    </div>
</div>


<Modal @ref="_statisticsmodal" Title="@_statisticsmodaltitle" IsScrollable="true" Size="ModalSize.ExtraLarge">
    <BodyTemplate>
        
        @foreach (var item in _chartData)
        {
            <div>@item.QuestionText</div>
            <MudBlazor.MudPaper Class="pa-4" Style="width:400px">
                <MudBlazor.MudChart ChartType="MudBlazor.ChartType.Pie" InputData="@item.Data"
                                    InputLabels="@item.Labels" Width="300px" Height="300px">
                </MudBlazor.MudChart>
            </MudBlazor.MudPaper>
        }

    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="OnHideSModalClick">Close</Button>
    </FooterTemplate>
</Modal>




@inject TestFileParserService TestParserService
@inject SurveyFileParserService SurveyParserService
@inject AuthenticationStateProvider AuthProvider
@inject ApplicationDbService DbService

@code {
    private List<(string QuestionText, double[] Data, string[] Labels)> _chartData = new();    
    
    private string _uploadResult = string.Empty;
    private string _curUserId = string.Empty;
    private Modal _modal = default!;
    private List<TestownikTestModel>? _testList;
    private List<SurveyModel>? _surveyList;
    private ConfirmDialog _dialog = null!;
    
    private Modal _statisticsmodal = default!;
    private string _statisticsmodaltitle = string.Empty;
    private SurveyModel _tempStatSurvey;

    private async Task<double[]> GetData(QuestionModel q)
    {
        return await DbService.GetSurveyAnswerCountByID(q);
    }
    
    private async Task<string[]> GetLabelsAsync(QuestionModel q, double[] data)
    {
        var list = new List<string>();
        var c = 0;
        
        foreach (var a in q.SAnswers)
        {
            list.Add($"{a.SAnswerText} - {data[c]}");
            c++;
            // Console.WriteLine(a.SAnswerText);
        }

        return await Task.FromResult(list.ToArray());
    }

    
    
    private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
    {
            var file = e.File;

            if (file.Name.EndsWith(".zip", StringComparison.OrdinalIgnoreCase))
            {
                await ProcessZipFileAsync(file);
            }
            else
            {
                _uploadResult = "Please upload a .zip file.";
            } 
    }

    private async Task ProcessZipFileAsync(IBrowserFile file)
    {

        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        var tempDir = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
        Directory.CreateDirectory(tempDir);
        
        try
        {
            var tempZipPath = Path.Combine(tempDir, file.Name);
            await File.WriteAllBytesAsync(tempZipPath, buffer);

            ZipFile.ExtractToDirectory(tempZipPath, tempDir);
            // Console.WriteLine(tempDir);
            
            //rozroznianie miedzy ankieta a testem
            var infoFilePath = Path.Combine(tempDir, "!INFO.txt");
            if (File.Exists(infoFilePath))
            {
                _uploadResult = $"!INFO.txt found. Processing survey...";

                var survey = await SurveyParserService.ParseFileAsync(tempDir, _curUserId);
                await DbService.DbInsertSurveyAsync(survey);
                
                _uploadResult = $"Uploaded '{file.Name}' successfully with !INFO.txt and processed {survey.SQuestions.Count()} question(s).";
            }
            else
            {
                _uploadResult = $"!INFO.txt not found. Processing test...";
                var testName = file.Name.Replace(".zip", " ").Trim();
                
                var testownikTest = await TestParserService.ParseFileAsync(tempDir, _curUserId, testName);
                await DbService.DbInsertTestAsync(testownikTest);
                            
                _uploadResult = $"Uploaded '{file.Name}' successfully and processed {testownikTest.TestQuestions.Count()} question(s).";
            }


            
        }
        catch (Exception ex)
        {
            _uploadResult = $"Error processing zip file: {ex.Message}";
        }
        finally
        {
            if (Directory.Exists(tempDir))
            {
                Directory.Delete(tempDir, true);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthProvider.GetAuthenticationStateAsync()).User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        _curUserId = userStringId;

        _testList =  await DbService.TestContentsAsync(_curUserId);
        _surveyList = await DbService.SurveyContentsAsync(_curUserId);
    }
    
    private async Task OnShowSModalClick(SurveyModel s)
    {
        _tempStatSurvey = s;
        _statisticsmodaltitle = $"{_tempStatSurvey.SurveyTitle} - Survey Statistics";
        
        _chartData.Clear();
        
        foreach (var q in _tempStatSurvey.SurveyQuestions)
        {
            var data = await GetData(q); // Synchronous or asynchronous as required
            var labels = await GetLabelsAsync(q,data); // Asynchronous call
            
            _chartData.Add((q.SQuestionText, data, labels));
        }
        
        await _statisticsmodal.ShowAsync();
    }

    private async Task OnHideSModalClick()
    {
        await _statisticsmodal.HideAsync();
    }

    private async Task OnShowUploadModalClick()
    {
        _uploadResult = string.Empty;

        await _modal.ShowAsync();
    }

    private async Task OnHideUploadModalClick()
    {
        await _modal.HideAsync();
        _testList =  await DbService.TestContentsAsync(_curUserId);
        _surveyList = await DbService.SurveyContentsAsync(_curUserId);
    }

    private async Task DeleteTestCallback(TestownikTestModel test)
    {
        var temp = await ShowConfirmationAsync();

        if (temp)
        {
            await DbService.DeleteTestAsync(test);
            _testList =  await DbService.TestContentsAsync(_curUserId);

        }
    }
    
    private async Task DeleteSurveyCallback(SurveyModel survey)
    {
        var temp = await ShowConfirmationAsync();

        if (temp)
        {
            await DbService.DeleteSurveyAsync(survey);
            _surveyList =  await DbService.SurveyContentsAsync(_curUserId);

        }
    }

    private async Task<bool> ShowConfirmationAsync()
    {
        var confirmation = await _dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the selected file. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        return confirmation;
    }

    private async Task SwitchPublicStateCallback(SurveyModel survey)
    {
        await DbService.SurveySwitchPublicStateAsync(survey);
        StateHasChanged();
    }
    
}